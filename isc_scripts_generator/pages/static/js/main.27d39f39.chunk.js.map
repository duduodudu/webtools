{"version":3,"sources":["App.jsx","SysItem.jsx","data.js","reportWebVitals.js","index.js"],"names":["methodName","defaultFunction","functionStartTime","Date","systemId","conditionId","App","props","scriptEditorRef","React","createRef","inputJsonEditorRef","showTips","Modal","info","title","content","style","color","onOk","addSystem","system","sysName","id","connectStr","conditions","keyStr","relationStr","vauleStr","systems","state","push","setState","resetSystem","handleUpload","e","type","reader","FileReader","readAsText","target","files","onload","txt","result","console","log","current","editor","setValue","handleUploadAntd","file","status","message","success","name","originFileObj","inputChange","value","inputBlur","runScript","parseScript","getValue","JSON","stringify","parser","parse","error","inputJson","funcName","data","eval","functionStr","endTime","getTime","outputJson","duration","generateScript","initSys","conditionStr","sys","arrayName","aCond","condition","method","formatMethod","getFormatScript","downloadTxtFile","element","document","createElement","Blob","href","URL","createObjectURL","download","body","appendChild","click","copyToClip","aux","select","execCommand","removeChild","prevError","isInputJsonPreview","virtualData","className","gutter","xs","sm","md","lg","span","this","onChange","placeholder","onClick","icon","map","index","onSysNameChange","onSysConnectChange","str","onRemoveSystem","splice","onRemoveCondition","conIndex","onChangeCondition","changed","onAddCondition","showUploadList","source","ref","options","mode","mime","lineNumbers","matchBrackets","autoCloseBrackets","styleActiveLine","smartIndent","indentUnit","onKeyPress","showHint","onBlur","onCursorActivity","src","foldGutter","lineWrapping","get_beautify","toString","notification","open","description","Component","Option","Select","SysItem","sysInputStyle","width","inputStyle","formRef","validateFields","then","names","onConditionChangedInput","change","onConditionChangedSelect","onConditionChangedInputToUpdateView","layout","labelCol","wrapperCol","justify","display","Item","rules","required","danger","shape","Group","compact","marginTop","ghost","size","vaule","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.27d39f39.chunk.js","sourcesContent":["import \"./App.less\";\nimport { Button, Col, Input, Row, Space, Upload, message, notification,Modal } from \"antd\";\nimport React, { Component } from \"react\";\nimport {QuestionCircleOutlined} from '@ant-design/icons'\n// JSON预览插件\nimport ReactJson from \"react-json-view\";\n// 代码编辑器\nimport 'codemirror/lib/codemirror.js';\nimport 'codemirror/lib/codemirror.css';\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\nimport 'codemirror/addon/hint/show-hint.css';\nimport 'codemirror/addon/hint/show-hint';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/hint/javascript-hint';\nimport 'codemirror/theme/ambiance.css';\n\nimport 'codemirror/addon/fold/foldgutter.css';\nimport 'codemirror/addon/fold/brace-fold.js';\nimport 'codemirror/addon/fold/comment-fold.js';\nimport 'codemirror/addon/fold/foldcode.js';\nimport 'codemirror/addon/fold/foldgutter.js';\nimport 'codemirror/addon/fold/indent-fold.js';\n\n\nimport SysItem from \"./SysItem\";\nimport { virtualData } from \"./data\";\n// import { formatJson } from \"./format\";\nimport  get_beautify  from \"js-beautify\";\nimport { parser } from \"jsonlint-mod\";\n\nconst methodName = 'dispatching';\nconst defaultFunction = `function ${methodName}(data){\n    var result = {};\n    var originData = JSON.parse(data);\n    var sys1 = JSON.parse(data);\n    sys1.messages=[];\n    var messages = originData.messages;\n    if(messages){\n        var sys1Messages = [];\n        for(var i = 0 ; i < messages.length; i ++ ) {\n            var msg = messages[i];\n            if(msg.type==\"1\"){\n                sys1Messages.push(msg);\n            }\n        }\n        sys1.messages = sys1Messages;\n    }\n    \n    result.sys1 = sys1;\n    console.log(\"输入的函数执行了\");\n    return result;\n}`;\nlet functionStartTime = new Date();\nlet systemId = 1;\nlet conditionId = 1;\n\nclass App extends Component {\n    scriptEditorRef = React.createRef();\n    inputJsonEditorRef = React.createRef();\n    constructor(props) {\n        super(props);\n        this.state = {\n            prevError: '',\n            // 参数是否为预览状态\n            isInputJsonPreview: false ,\n            // 参数输入\n            inputJson: JSON.stringify(virtualData, null, 4),\n            // 脚本函数编辑\n            functionStr: defaultFunction,\n            // 耗时时间\n            duration: 0,\n            outputJson: {},\n            // 解析的数组名称\n            arrayName: 'logisticsPlanning',\n            //\n            systems: [\n                {\n                    id: 1,\n                    sysName: 'SYS1',\n                    connectStr: 'if',// else if\n                    conditions: [\n                        {\n                            id: 1,\n                            keyStr: 'systemType',\n                            relationStr: '==',\n                            vauleStr: '1',\n                            connectStr: '',\n                        }\n                    ],\n                }\n            ],\n        }\n\n        this.showTips();\n    }\n    /**\n     * 显示操作说明\n     */\n    showTips = ()=> {\n        Modal.info({\n            title: '使用帮助',\n            content: (\n              <div>\n                <p>1. 填写想要解析的数组。</p>\n                <p>\n                    2. 添加对应的分发系统，编写对应的过滤条件;\n                <span style={{color:'red'}}>系统名称和条件必填，不然会报错的哦</span>\n                </p>\n                <p>3. 点击\"生成脚本\",并对脚本进行简单检查;</p>\n                <p>4. 输入或者导入参数，点击\"运行\"进行校验;</p>\n              </div>\n            ),\n            onOk() {},\n          });\n    }\n    /**\n    * 添加系统\n    */\n    addSystem = () => {\n        systemId += 1;\n        const system = {\n            sysName: '',\n            id: systemId,\n            connectStr: 'if',// else if\n            conditions: [\n                {\n                    id: 1,\n                    keyStr: '',\n                    relationStr: '',\n                    vauleStr: '',\n                    connectStr: '',\n                }\n            ],\n        };\n        const systems = this.state.systems;\n        systems.push(system);\n        this.setState({\n            systems: systems,\n        })\n    }\n    /**\n     * 重置系统\n     */\n    resetSystem = () => {\n        systemId += 1;\n        const system = {\n            sysName: '',\n            id: systemId,\n            connectStr: 'if',\n            conditions: [\n                {\n                    id: 1,\n                    keyStr: '',\n                    relationStr: '',\n                    vauleStr: '',\n                    connectStr: '',\n                }\n            ],\n        };\n        this.setState({\n            systems: [system],\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"main\">\n                {/* <Divider orientation=\"left\">分发平台脚本工具</Divider> */}\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                    <Col className=\"main-item\" span={24}>\n                        <div>\n                            <Space>\n                                <label>解析数组:</label>\n                                <Input name=\"arrayName\" value={this.state.arrayName} onChange={this.inputChange} placeholder=\"list\" />\n                                <Button type=\"primary\" onClick={this.addSystem}>添加系统</Button>\n                                <Button type=\"primary\" onClick={this.resetSystem}>重置系统</Button>\n                                <Button type=\"primary\" onClick={this.generateScript}>生成脚本</Button>\n                                <Button type=\"primary\" onClick={() => {\n                                    this.generateScript();\n                                    this.runScript();\n                                }}>生成+运行</Button>\n                                <Button type=\"primary\"\n                                    onClick={this.showTips}\n                                    icon={<QuestionCircleOutlined />} >使用帮助</Button>\n                            </Space>\n                        </div>\n                        <Row className=\"text-center\">\n                            <Col span={8}>系统名称</Col>\n                            <Col span={16}>分发条件</Col>\n                        </Row>\n                        {\n                            this.state.systems.map((system, index) => {\n                                return <SysItem index={index} system={system} key={system.id}\n                                    onSysNameChange={(name) => {\n                                        const systems = this.state.systems;\n                                        systems[index].sysName = name;\n                                        this.setState({\n                                            systems: systems,\n                                        });\n                                    }}\n                                    onSysConnectChange={(str) => {\n                                        const systems = this.state.systems;\n                                        systems[index].connectStr = str;\n                                        this.setState({\n                                            systems: systems,\n                                        }, () => {\n                                            console.log(systems);\n                                        });\n                                    }}\n                                    onRemoveSystem={(index) => {\n                                        const systems = this.state.systems;\n                                        systems.splice(index, 1);\n                                        this.setState({\n                                            systems: systems,\n                                        });\n                                    }}\n                                    onRemoveCondition={(conIndex) => {\n                                        const systems = this.state.systems;\n                                        systems[index].conditions.splice(conIndex, 1);\n                                        this.setState({\n                                            systems: systems,\n                                        });\n                                    }}\n                                    onChangeCondition={(conIndex, changed) => {\n                                        const systems = this.state.systems;\n                                        systems[index].conditions.splice(conIndex, 1, changed);\n                                        this.setState({\n                                            systems: systems,\n                                        }, () => {\n                                            console.log(this.state.systems);\n                                        });\n\n                                    }}\n                                    onAddCondition={() => {\n                                        conditionId += 1;\n                                        const condition = {\n                                            id: conditionId,\n                                            keyStr: '',\n                                            relationStr: '==',\n                                            vauleStr: '',\n                                            connectStr: '&&',\n                                        };\n                                        const systems = this.state.systems;\n                                        systems[index].conditions.push(condition);\n                                        this.setState({\n                                            systems: systems,\n                                        });\n                                    }}/>;\n                            })\n                        }\n                    </Col>\n                </Row>\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                    <Col className=\"main-item\" span={24}>\n                        <Space>\n                            <label>脚本在线编辑</label>\n                            <Upload showUploadList={false} onChange={(info) => {\n                                this.handleUploadAntd(info, 'functionStr');\n                            }}>\n                                <Button type=\"primary\">导入</Button>\n                            </Upload>\n                            <Button type=\"primary\" onClick={this.runScript}>运行</Button>\n                            <Button type=\"primary\" onClick={() => {\n                                this.downloadTxtFile(this.state.functionStr);\n                            }}>导出</Button>\n                            <Button type=\"primary\" onClick={() => {\n                                this.copyToClip(this.state.functionStr);\n                            }}>复制</Button>\n                            <Button type=\"primary\" onClick={() => {\n                                const source = this.getFormatScript(this.state.functionStr);\n                                 this.scriptEditorRef.current.editor.setValue(source);\n                                 this.setState({functionStr:source});\n                            }}>格式化</Button>\n\n                            <input type=\"file\"\n                                onChange={(e) => {\n                                    this.handleUpload(e, 'functionStr');\n                                }} />\n                        </Space>\n                        <CodeMirror\n                            value={defaultFunction}\n                            ref={this.scriptEditorRef}\n                            options={{\n                                mode: {\n                                    name: 'javascript',\n                                },\n                                mime: 'text/javascript, application/json, application/ld+json, text/typescript, application/typescript',\n                                // theme: 'idea',\n                                lineNumbers: true,\n                                matchBrackets: true, // 匹配结束符号，比如\"]、}\"\n                                autoCloseBrackets: true, // 自动闭合符号\n                                styleActiveLine: true, // 显示选中行的样式\n                                smartIndent: true, // 智能缩进\n                                indentUnit: 4, // 智能缩进单位为4个空格长度\n                            }}\n                            onKeyPress={(e) => {\n                                // 调用提示\n                                e.showHint();\n                            }}\n                            onBlur={(editor) => {\n                                const value = editor.getValue();\n                                // console.log('输入的函数为:', value);\n                                this.setState({\n                                    functionStr: value,\n                                });\n                            }}\n                            onCursorActivity={e => {\n                                // 调用提示\n                                //e.showHint();\n                            }}\n                            onChange={(editor, data, value) => {\n                                // editor.showHint();\n                            }}\n                        />\n                    </Col>\n                </Row>\n                {/* <Divider orientation=\"left\"></Divider> */}\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                    <Col className=\"main-item\" span={12}>\n                        <Space>\n                            <label>输入参数:</label>\n                            <Upload showUploadList={false} onChange={(info) => {\n                                this.handleUploadAntd(info, 'inputJson');\n                            }}>\n                                <Button type=\"primary\">导入</Button>\n                            </Upload>\n                            <Button type=\"primary\" onClick={() => {\n                                this.setState({\n                                    inputJson: '{}',\n                                })\n                            }}>清除</Button>\n                            <Button type=\"primary\" onClick={() => {\n                                const isInputJsonPreview = this.state.isInputJsonPreview;\n                                if(isInputJsonPreview){\n                                    this.setState({ isInputJsonPreview :!isInputJsonPreview});\n                                } else {\n                                    if(this.parseScript()){\n                                        this.setState({ isInputJsonPreview :!isInputJsonPreview});\n                                    }\n                                }\n\n                            }}>{this.state.isInputJsonPreview ?'编辑':'预览'}</Button>\n                            <Button type=\"primary\" onClick={this.runScript}>运行</Button>\n                            <Button type=\"primary\" onClick={()=>{\n                                this.parseScript();\n                            }}>校验</Button>\n                            <input type=\"file\"\n                                onChange={(e) => {\n                                    this.handleUpload(e, 'inputJson');\n                                }} />\n                        </Space>\n                        {this.state.isInputJsonPreview\n                            ? <ReactJson src={JSON.parse(this.state.inputJson)} />\n                            : <CodeMirror\n                            value={this.state.inputJson}\n                            ref={this.inputJsonEditorRef}\n                            options={{\n                                mode: {\n                                    name: 'javascript',\n                                },\n                                mime: 'text/javascript, application/json, application/ld+json, text/typescript, application/typescript',\n                                lineNumbers: true,\n                                matchBrackets: true, // 匹配结束符号，比如\"]、}\"\n                                autoCloseBrackets: true, // 自动闭合符号\n                                styleActiveLine: true, // 显示选中行的样式\n                                smartIndent: true, // 智能缩进\n                                indentUnit: 2, // 智能缩进单位为4个空格长度\n                                foldGutter: true,\n                                lineWrapping: true,\n                            }}\n                            onBlur={(editor) => {\n                                let value = editor.getValue();\n                                // value = JSON.stringify(JSON.parse(value), null, 2);\n                                // value = formatJson(value);\n                                // editor.setValue(value);\n                                this.setState({\n                                    inputJson: value,\n                                });\n                                // this.runScript();\n                            }}\n                            onCursorActivity={e => {\n                                // 调用提示\n                                //e.showHint();\n                            }}\n                            onChange={(editor, data, value) => {\n                                // editor.showHint();\n                            }}\n                        />}\n                        {/* <textarea name=\"inputJson\" value={this.state.inputJson}\n                                  onChange={this.inputChange}\n                                  onBlur={this.inputBlur}\n                        ></textarea> */}\n                    </Col>\n                    <Col className=\"main-item\" span={12}>\n                        <div>\n                            <label>输出参数:</label>\n                            <label>耗时:约<span>{this.state.duration}</span>ms</label>\n                        </div>\n                        <ReactJson src={this.state.outputJson} />\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    handleUpload = (e, type) => {\n        //console.log(e.target.files[0]);\n        const reader = new FileReader();\n        reader.readAsText(e.target.files[0]);\n        reader.onload = (e) => {\n            const txt = e.target.result;\n            if (type === 'functionStr') {\n                console.log(this.scriptEditorRef);\n                const editor = this.scriptEditorRef.current.editor;\n                editor.setValue(txt);\n            } else if (type === 'inputJson') {\n                const editor = this.inputJsonEditorRef.current.editor;\n                editor.setValue(txt);\n            }\n            this.setState({\n                [type]: e.target.result,\n            })\n        };\n    }\n    handleUploadAntd = (info, type) => {\n        if (info.file.status === 'uploading') {\n            // console.log(info.file, info.fileList);\n            return;\n        }\n        if (info.file.status === 'error') {\n            message.success(`${info.file.name} 导入成功！`);\n            const reader = new FileReader();\n            reader.readAsText(info.file.originFileObj);\n            reader.onload = (e) => {\n                const txt = e.target.result;\n                if (type === 'functionStr') {\n                    console.log(this.scriptEditorRef);\n                    const editor = this.scriptEditorRef.current.editor;\n                    editor.setValue(txt);\n                } else if (type === 'inputJson') {\n                    const editor = this.inputJsonEditorRef.current.editor;\n                    editor.setValue(txt);\n                }\n                this.setState({\n                    [type]: e.target.result,\n                })\n            };\n        }\n    }\n\n    /**\n     * 输入框改变\n     * @param e\n     */\n    inputChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        })\n    }\n    /**\n     * 输入完成\n     */\n    inputBlur = () => {\n        this.runScript();\n    }\n    /**\n     * 校验json是否正确\n     */\n    parseScript = ()=>{\n        const editor =  this.inputJsonEditorRef.current.editor ;\n        let value = editor.getValue();\n        try {\n            value = JSON.stringify(parser.parse(value),null,2);\n        } catch (e) {\n            console.error(e);\n            Modal.error({\n                title:'Json检验失败!',\n                content:(\n                    <div>\n                        <p>错误信息如下:</p>\n                        <p>{e.message}</p>\n                    </div>\n                ),\n            });\n            return false;\n        }\n        message.success('json检验通过!');\n        editor.setValue(value);\n        this.setState({inputJson:value});\n        return true;\n    }\n    /**\n     * 运行\n     */\n    runScript = () => {\n        if(!this.parseScript()){\n            return;\n        }\n        functionStartTime = new Date();\n        // 执行代码\n        let funcName = (data) => {\n            // console.log('原始的函数:', data);\n            return data;\n        };\n        try{\n            eval(`funcName = ${this.state.functionStr}`);\n        } catch (e) {\n            console.error(e);\n            Modal.error({\n                title:'脚本运行出现错误！',\n                content:(\n                  <div>\n                      <p>{JSON.stringify(e,null,4)}</p>\n                  </div>\n              ),\n            })\n        }\n        // console.log('funcName',funcName);\n        const result = funcName(this.state.inputJson);\n\n        // 记录结束时间\n        const endTime = new Date();\n        console.log('开始时间', functionStartTime.getTime());\n        console.log('结束时间', endTime.getTime());\n        this.setState({\n            outputJson: result,\n            duration: endTime.getTime() - functionStartTime.getTime(),\n        })\n\n    }\n    /**\n     * 生成脚本\n     */\n    generateScript = () => {\n        let initSys = '';\n        let conditionStr = '';\n        let result = '';\n        for (const sys of this.state.systems) {\n            // 初始化数组以及对象\n            initSys += `\n            var ${sys.sysName} = JSON.parse(data);\n            ${sys.sysName}[\"${this.state.arrayName}\"] = [];\n            var ${sys.sysName}Messages = [];`\n            // for循环\n            let aCond = '';\n            for (const condition of sys.conditions) {\n                aCond += `  ${condition.connectStr}  msg[\"${condition.keyStr}\"] ${condition.relationStr} \"${condition.vauleStr}\" `;\n            }\n            conditionStr += `\n             ${sys.connectStr} (  ${aCond}   ) {\n                 ${sys.sysName}Messages.push(msg);\n             }\n            `;\n\n            // 赋值给result\n            result += `\n            ${sys.sysName}[\"${this.state.arrayName}\"] = ${sys.sysName}Messages ;\n            result[\"${sys.sysName}\"] = ${sys.sysName};\n            `;\n        }\n        const method = `function ${methodName}(data) {\n            var result = {};\n            var originData = JSON.parse(data);\n\n            ${initSys}\n\n            var messages = originData[\"${this.state.arrayName}\"];\n            if (messages) {\n                for (var i = 0; i < messages.length; i++) {\n                    var msg = messages[i];\n                    ${conditionStr}\n                }\n            }\n\n            ${result}\n            return result;\n        }\n        `;\n      const editor =   this.scriptEditorRef.current.editor;\n       // editor.setValue(method);\n        // const range = { from: editor.getCursor(true), to: editor.getCursor(false) };\n        // editor.autoFormatRange(range.from, range.to);\n        const formatMethod = this.getFormatScript(method);\n       editor.setValue(formatMethod);\n        this.setState({\n            functionStr: formatMethod,\n        });\n    }\n\n    getFormatScript(source) {\n        // console.log(get_beautify);\n        const formatMethod =  get_beautify(source);\n\n        return formatMethod;\n    }\n\n    componentDidCatch(error, info) {\n        console.log('componentDidCatch');\n        console.log(error, info);\n        const isNewError = (error.toString() !== this.state.prevError.toString());// should only run once\n        if (isNewError) {//判断两次错误不一致才再次执行，不然一直循环\n            this.setState({ prevError: error });\n            notification.open({\n                message: '错误提示',\n                description: '',\n                onClick: () => {\n                    console.log('Notification Clicked!');\n                },\n            });\n        }\n    }\n\n    /**\n     * 下载文本\n     */\n    downloadTxtFile = (txt) => {\n        const element = document.createElement(\"a\");\n        const file = new Blob([txt], { type: 'text/plain' });\n        element.href = URL.createObjectURL(file);\n        element.download = \"脚本.js\";\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    /**\n     * 复制内容到粘贴板\n     */\n    copyToClip = (content,) => {\n        const aux = document.createElement(\"textarea\");\n        // aux.setAttribute(\"value\", content);\n        aux.value = content;\n        document.body.appendChild(aux);\n        aux.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(aux);\n        message.success(`复制成功！`);\n    }\n}\n\nexport default App;\n","import './SysItem.less';\nimport React, {Component} from 'react';\nimport {Button, Col, Input, Row, Select, Form} from \"antd\";\nimport {CloseCircleOutlined} from \"@ant-design/icons\";\n\nconst {Option} = Select;\n\nclass SysItem extends Component {\n    sysInputStyle = {width: '80%'};\n    inputStyle = {width: '100%'};\n    formRef = React.createRef();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            system: props.system,\n        }\n    }\n\n    onSysNameChange = (e) => {\n        console.log(this.formRef.current);\n        this.formRef.current.validateFields().then((names) => {\n            console.log('检验结果', names);\n        });\n        this.props.onSysNameChange(e.target.value);\n    }\n    onAddCondition = () => {\n        this.props.onAddCondition();\n    }\n    /**\n     * 判断条件发生变化（input）\n     */\n    onConditionChangedInput = (e, conIndex, condition) => {\n        console.log('输入的条件内容（onBlur）:', e.target.value);\n        const change = JSON.parse(JSON.stringify(condition));\n        change[e.target.name] = e.target.value;\n        this.props.onChangeCondition(conIndex, change);\n        this.formRef.current.validateFields();\n    }\n    /**\n     * 判断条件发生变化（select）\n     */\n    onConditionChangedSelect = (e, type, conIndex, condition) => {\n        const change = JSON.parse(JSON.stringify(condition));\n        change[type] = e;\n        this.props.onChangeCondition(conIndex, change);\n        this.formRef.current.validateFields();\n    }\n\n    onConditionChangedInputToUpdateView = (e, conIndex) => {\n        const system = this.state.system;\n        const condition = system.conditions[conIndex];\n        condition[e.target.name] = e.target.value;\n        console.log('输入的条件内容:', e.target.name, e.target.value);\n        this.setState({\n            system,\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Form ref={this.formRef} layout={{\n                    labelCol: {width: '0'},\n                    wrapperCol: {width: '100%'},\n                }}>\n                    <Row justify=\"end\">\n                        <Col span={10}>\n                            {\n                                this.props.index === 0 ?\n                                    <div style={{width: '100px', display: 'inline-block'}}></div>\n                                    :\n                                     <Form.Item style={{display: 'inline-flex'}}\n                                        name={'connectStr' + this.props.system.id}\n                                                           rules={[{required: true, message: '请选择'}]}>\n                                    <Select value={this.props.system.connectStr}\n                                        style={{width: \"100px\"}}\n                                        onChange={(e) => {\n                                            this.props.onSysConnectChange(e);\n                                        }}>\n                                        <Option value=\"if\">if</Option>\n                                        <Option value=\"else if\">else if</Option>\n                                        <Option value=\"else\">else</Option>\n                                    </Select>\n                                </Form.Item>\n                            }\n\n                            <Form.Item style={{display: 'inline-flex'}}\n                                       name={'sysName' + this.props.system.id}\n                                       rules={[{required: true, message: '请输入系统名称'}]}>\n                                <Input style={this.sysInputStyle}\n                                       name=\"sysName\"\n                                       value={this.state.system.sysName}\n                                       onBlur={this.onSysNameChange}\n                                       onChange={(e) => {\n                                           const system = this.state.system;\n                                           system.sysName = e.target.value;\n                                           this.setState({system});\n                                       }}\n                                       placeholder=\"SYS2012\"/>\n                            </Form.Item>\n                            {\n                                this.props.index === 0 ?\n                                    <div></div>\n                                    :\n                                    <Button danger type=\"text\" shape=\"circle\"\n                                            onClick={() => {\n                                                this.props.onRemoveSystem(this.props.index);\n                                            }}\n                                            icon={<CloseCircleOutlined/>}/>\n                            }\n                        </Col>\n                        <Col span={14}>\n                            {\n                                this.state.system.conditions.map((condition, conIndex) => {\n                                    return <Input.Group compact key={condition.id}>\n                                        {\n                                            conIndex === 0 ?\n                                                <div style={{width: '80px', display: 'inline-block', marginTop: '4px'}}>\n                                                    <Button ghost type=\"primary\" size=\"small\"\n                                                            onClick={this.onAddCondition}\n                                                        // icon={<PlusCircleOutlined />}\n                                                    >添加条件</Button>\n                                                </div>\n                                                :\n                                                <Form.Item style={{display: 'inline-flex'}}\n                                                           name={'connectStr' + this.props.system.conditions[conIndex].id}\n                                                           rules={[{required: true, message: '请选择'}]}>\n                                                    <Select vaule={condition.connectStr}\n                                                            style={{width: '80px'}}\n                                                            onChange={(e) => {\n                                                                this.onConditionChangedSelect(e, 'connectStr', conIndex, condition);\n                                                            }}>\n                                                        <Option value=\"&&\"> {'&&'}</Option>\n                                                        <Option value=\"||\"> {'||'}</Option>\n                                                    </Select>\n                                                </Form.Item>\n                                        }\n                                        <Form.Item style={{display: 'inline-flex'}}\n                                                   name={'keyStr' + this.props.system.conditions[conIndex].id}\n                                                   rules={[{required: true, message: '请输入判断的属性名称'}]}>\n                                            <Input style={this.inputStyle}\n                                                   name=\"keyStr\" value={condition.keyStr}\n                                                   onChange={(e) => {\n                                                       this.onConditionChangedInputToUpdateView(e, conIndex)\n                                                   }}\n                                                   onBlur={(e) => {\n                                                       this.onConditionChangedInput(e, conIndex, condition)\n                                                   }}\n                                                   placeholder=\"key\"/>\n                                        </Form.Item>\n                                        <Form.Item style={{display: 'inline-flex'}}\n                                                   name={'relationStr' + this.props.system.conditions[conIndex].id}\n                                                   rules={[{required: true, message: '请选择'}]}>\n                                            <Select value={condition.relationStr}\n                                                    style={{width: '80px'}}\n                                                    onChange={(e) => {\n                                                        this.onConditionChangedSelect(e, 'relationStr', conIndex, condition);\n                                                    }}>\n                                                <Option value=\"<\"> {'<'}</Option>\n                                                <Option value=\"<=\"> {'<='}</Option>\n                                                <Option value=\"==\"> {'=='}</Option>\n                                                <Option value=\">=\"> {'>+'}</Option>\n                                                <Option value=\">\"> {'>'}</Option>\n                                                <Option value=\"!=\"> {'='}</Option>\n                                            </Select>\n                                        </Form.Item>\n                                        <Form.Item style={{display: 'inline-flex'}}\n                                                   name={'vauleStr' + this.props.system.conditions[conIndex].id}\n                                                   rules={[{required: true, message: '请输入判断的属性值'}]}>\n                                            <Input style={this.inputStyle}\n                                                   name=\"vauleStr\" value={condition.vauleStr}\n                                                   onChange={(e) => {\n                                                       this.onConditionChangedInputToUpdateView(e, conIndex)\n                                                   }}\n                                                   onBlur={(e) => {\n                                                       this.onConditionChangedInput(e, conIndex, condition)\n                                                   }}\n                                                   placeholder=\"value\"/>\n                                        </Form.Item>\n                                        {\n                                            conIndex === 0 ?\n                                                <div></div>\n                                                :\n                                                <Button ghost type=\"danger\" shape=\"circle\"\n                                                        onClick={() => {\n                                                            this.props.onRemoveCondition(conIndex);\n                                                        }}\n                                                        icon={<CloseCircleOutlined/>}/>\n                                        }\n                                    </Input.Group>\n                                })\n                            }\n                            {/* <Button type=\"primary\"\n                            onClick={this.onAddCondition}\n                            icon={<PlusCircleOutlined />} >添加判断条件</Button> */}\n                        </Col>\n                    </Row>\n                </Form>\n            </div>\n        );\n    }\n}\n\n\nexport default SysItem;\n","/**\n * 虚拟数据\n */\nexport const virtualData = {\n    \"id\": \"SLI0102020112600000000001\",\n    \"interfaceCode\": \"SLI010\",\n    \"createTime\": \"20201126000000\",\n    \"originalSys\": \"LOMS\",\n    \"targetSys\": \"\",\n    \"processFlag\": \"20201126000000\",\n    \"totalPages\": \"3\",\n    \"page\": \"1\",\n    \"pagingType\": \"3\",\n    \"logisticsMonth\": \"202011\",\n    \"logisticsPlanning\": [{\n        \"plantType\": \"2\",\n        \"systemType\": \"2\",\n        \"predictArriveYDDate\": \"20201126\",\n        \"route\": \"GT95\",\n        \"seqNo\": \"01\",\n        \"strongHold\": \"B01\",\n        \"dockCode\": [\"K5\", \"U1\"],\n        \"station\": \"1\",\n        \"receiveTime\": \"20201126072000\",\n        \"leaveTime\": \"20201126080000\"\n    }, {\n        \"plantType\": \"2\",\n        \"systemType\": \"2\",\n        \"predictArriveYDDate\": \"20201126\",\n        \"route\": \"GT95\",\n        \"seqNo\": \"02\",\n        \"strongHold\": \"B01\",\n        \"dockCode\": [\"K5\", \"U1\"],\n        \"station\": \"1\",\n        \"receiveTime\": \"20201126081500\",\n        \"leaveTime\": \"20201126090000\"\n    }, {\n        \"plantType\": \"1\",\n        \"systemType\": \"1\",\n        \"predictArriveYDDate\": \"20201126\",\n        \"route\": \"GT96\",\n        \"seqNo\": \"01\",\n        \"strongHold\": \"B01\",\n        \"dockCode\": [\"U1\"],\n        \"station\": \"2\",\n        \"receiveTime\": \"20201126070000\",\n        \"leaveTime\": \"20201126080000\"\n    }, {\n        \"plantType\": \"1\",\n        \"systemType\": \"1\",\n        \"predictArriveYDDate\": \"20201126\",\n        \"route\": \"GT96\",\n        \"seqNo\": \"02\",\n        \"strongHold\": \"B01\",\n        \"dockCode\": [\"U1\"],\n        \"station\": \"2\",\n        \"receiveTime\": \"20201126081000\",\n        \"leaveTime\": \"20201126090000\"\n    }]\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}